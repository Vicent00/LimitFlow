// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id             String          @id @default(uuid())
  address        String          @unique
  isAdmin        Boolean         @default(false)
  nonce          String
  nonceExpiresAt DateTime        @default(now())
  orders         Order[]
  reputation     UserReputation?
  rateLimitLogs  RateLimitLog[]
  createdAt      DateTime        @default(now())
  updatedAt      DateTime        @updatedAt

  @@index([address])
}

model Order {
  id               String      @id @default(uuid())
  userId           String
  user             User        @relation(fields: [userId], references: [id])
  userAddress      String // Dirección de la wallet del usuario
  type             OrderType
  tokenIn          String
  tokenOut         String
  amountIn         BigInt
  amountOut        BigInt // Monto mínimo a recibir
  price            Float // Precio como número decimal
  status           OrderStatus @default(PENDING)
  blockchainTxHash String?     @map("blockchain_tx_hash")
  expiresAt        DateTime? // Fecha de expiración de la orden
  fills            Fill[]
  createdAt        DateTime    @default(now())
  updatedAt        DateTime    @updatedAt

  @@index([userId])
  @@index([userAddress])
  @@index([tokenIn, tokenOut])
  @@index([status])
}

model Fill {
  id        String   @id @default(uuid())
  orderId   String
  order     Order    @relation(fields: [orderId], references: [id])
  amount    BigInt
  price     Float // Cambiado a Float para consistencia con Order
  createdAt DateTime @default(now())

  @@index([orderId])
}

model Price {
  id        String   @id @default(uuid())
  tokenIn   String
  tokenOut  String
  price     Float
  timestamp DateTime @default(now())
  source    String // Fuente del precio (ej: "chainlink", "uniswap", etc.)
  chainId   Int // ID de la red (1 para mainnet, 137 para polygon, etc.)

  @@index([tokenIn, tokenOut])
  @@index([timestamp])
  @@index([chainId])
}

model UserReputation {
  id                   String    @id @default(uuid())
  userId               String    @unique
  user                 User      @relation(fields: [userId], references: [id])
  score                Int       @default(0)
  failedOrders         Int       @default(0)
  suspiciousActivities String[]
  lastFailedAt         DateTime?
  createdAt            DateTime  @default(now())
  updatedAt            DateTime  @updatedAt

  @@index([score])
  @@index([lastFailedAt])
}

model RateLimitLog {
  id        String   @id @default(uuid())
  ip        String
  userId    String
  user      User     @relation(fields: [userId], references: [id])
  action    String
  timestamp DateTime @default(now())

  @@index([ip])
  @@index([userId])
  @@index([timestamp])
}

enum OrderType {
  BUY
  SELL
}

enum OrderStatus {
  PENDING
  COMPLETED
  CANCELLED
  FAILED
}
